- hosts: nms
  become_user: root
  become: yes
  vars:
    docker_user: "ubuntu"
    pip_package: "python3-pip"
  pre_tasks:
    - name: version check
      assert:
        that: "ansible_version.full is version_compare('2.5', '>=')"
        msg: "You must have ansible version 2.5 or later"
    - name: announcement
      debug:
        msg: "Ansible go"
  roles:
    - role: zaxos.docker-ce-ansible-role
  tasks:
    - name: set network ra and forwarding
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_set: yes
        reload: yes
      with_items:
        - name: net.ipv6.conf.{{ ansible_default_ipv6.interface }}.accept_ra
          value: 2
        - name: net.ipv6.conf.all.accept_ra
          value: 2
        - name: net.ipv6.conf.all.forwarding
          value: 1
        - name: net.ipv6.conf.default.forwarding
          value: 1

    - name: flush ip6tables 
      iptables:
        table: "{{ item }}"
        ip_version: ipv6
        flush: true
      with_items:
        - nat
        - filter

    - name: Adding existing user to docker group
      user: 
        name: "{{ docker_user }}"
        groups: docker
        append: yes
    
    - name: Install pip (Ubuntu)
      apt:
        name: "{{ pip_package }}"
        state: present
      when: ansible_distribution == 'Ubuntu'

    - name: Add EPEL repo (Centos)
      yum_repository:
        name: epel
        description: EPEL YUM repo
        baseurl: https://download.fedoraproject.org/pub/epel/$releasever/$basearch/
        gpgcheck: no
      when: ansible_distribution == "CentOS"
    
    - name: Install pip (Centos)
      yum:
        name: "{{ pip_package }}"
        state: present
      when: ansible_distribution == "CentOS"
    
    - name: pip install docker
      pip:
        name: docker
        state: present
    
    - name: pip install docker-compose
      pip:
        name: docker-compose
        state: present

    - name: make directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ docker_user }}"
        group: docker
        mode: 0755
      with_items:
        - terragraph
        - terragraph/env
        - terragraph/docker_volumes
        - terragraph/docker_volumes/beringei
        - terragraph/docker_volumes/beringei/beringei_1s
        - terragraph/docker_volumes/beringei/beringei_30s
        - terragraph/docker_volumes/beringei/beringei_900s
        - terragraph/docker_volumes/logs
        - terragraph/docker_volumes/mysql_db
        - terragraph/docker_volumes/nginx
        - terragraph/docker_volumes/nginx/certs
        - terragraph/docker_volumes/nginx/conf.d
        - terragraph/docker_volumes/nginx/html
        - terragraph/docker_volumes/nginx/htpasswd
        - terragraph/docker_volumes/nginx/services.d
        - terragraph/docker_volumes/prometheus
        - terragraph/docker_volumes/prometheus/config
        - terragraph/mysql_init_scripts

    - name: copy scripts and config files
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ docker_user }}"
        group: docker
        mode: 0644
      with_items:
        - src: mysql_init_scripts/cxl.sql
          dest: terragraph/mysql_init_scripts/cxl.sql
        - src: destructively-clean-all-docker.sh
          dest: terragraph/destructively-clean-all-docker.sh
        - src: docker-compose-single.yml
          dest: terragraph/docker-compose.yml

    - name: copy docker_volume contents
      template:
        src: "{{ item }}"
        owner: "{{ docker_user }}"
        src: "docker_volumes/{{ item }}"
        dest: "terragraph/docker_volumes/{{ item }}"
        owner: "{{ docker_user }}"
        mode: 0644
        force: no
      with_items:
        - nginx/conf.d/default.conf
        - nginx/services.d/jupyter.conf
        - nginx/services.d/grafana.conf
        - nginx/services.d/nms.conf
        - nginx/services.d/prometheus.conf
        - prometheus/config/prometheus.yml

    - name: copy environment configs
      template:
        src: "{{ item }}"
        dest: terragraph/env/
        force: no
        owner: "{{ docker_user }}"
        group: docker
        mode: 0644
      with_fileglob:
        - env/*
    
    - name: log into registry
      docker_login:
        username: tgdeploy
        password: 4l5C46xVJ0h74OmRWPK5
        registry_url: https://secure.cxl-terragraph.com:443/v2
        reauthorize: yes

    - name: log into nms registry
      docker_login:
        username: tg_deploy
        password: 9SFRyl5CNyf9BK8u6Q
        registry_url: facebookconnectivity-tg-docker.jfrog.io
        reauthorize: yes

    - name: docker network prune -f
      command: docker network prune -f

    - name: docker network create
      command: docker network create --ipv6 --subnet=fd00:420:69::/48 terragraph_net

    - name: run compose
      docker_service:
        project_src: terragraph/.
        build: no
        state: present
        pull: yes
        stopped: no
        debug: yes
